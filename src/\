import {React,useState, useEffect} from 'react'
import useLocalStorage from './hooks/useLocalStorage'

import { makeStyles } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import FormControl from '@material-ui/core/FormControl';
import Select from '@material-ui/core/Select';
import MenuItem from '@material-ui/core/MenuItem';
import Button from '@material-ui/core/Button';
import SendIcon from '@material-ui/icons/Send';
import Divider from '@material-ui/core/Divider';


import SimpleEditor from "./components/convert"

import './my.css'

const axios = require('axios')

const useStyles = makeStyles((theme) => ({
  paper: {
    padding: theme.spacing(3),
    textAlign: 'center',
    border: "solid",
    margin: 10,
    borderColor: "blue",
  },
  paper_middle:{
    padding: theme.spacing(2),
    border: "solid",
    borderColor: "violet",
    margin: 10,
    textAlign: "center"
  },
  text:{
    padding: theme.spacing(2),
    textAlign: 'left',
    border: 'solid',
    borderColor: 'black',
    margin: 10
  },
  formControl: {
    minWidth: 120,
  },

  selectEmpty:{ 
    padding: theme.spacing(1)
  },

  button: {
    padding: theme.spacing(1),
  },
  button_c:{
    backgroundColor: "#2196f3"
  },
  controls:{
   fontSize: 'x-large',
   color: '#0398fc',
   padding: '20px'
  }
}));


function App() {


  const classes = useStyles();

  const [python, setpython ] = useLocalStorage('python','')



	// Hooks

  const [value, setValue]    = useState(''); 

  const [lang, setlang]      = useState('python3');
  
  const [output, setOutput]  = useState('');



	// Functions

  const handleLangChange = (event) => {
         setlang(event.target.value);
         console.log(lang)
        };


  const submit_code = () => {

	console.log("submitted code - ",value)
	axios.post('http://192.168.1.10:8000/api/code', {
  		lang,
  		code:value
		})
		.then((response) => {
  		   console.log(response);
		  }, (error) => {
  		   console.log(error);
		  });

  }



	// Defaults
	
  const default_code = ``

  const default_code_python = `
    # Online Python compiler.
    # Write Python 3 code in this online editor and run it.
    print("Hello world")`

  const default_code_cpp = `// Your First C++ Program

#include <iostream>

int main() {
    std::cout << "Hello World!";
    return 0;
}`
 
  const default_code_java = `class Simple{  
    public static void main(String args[]){  
     System.out.println("Hello Java");  
    }  
}  `









  return(


     <Grid container
           className="container"
           direction="row"
           justifyContent="space-around"
           alignItems="stretch"
           >


          <Grid item xs={3}>
            <Paper className={classes.paper}>
	       <h1 style={{fontSize:'1.6rem'}}> Problem Statement </h1>
	  	<br/><br/>
	  	<Divider/>
	  	<br/><br/>
	  	<p>Given arrival and departure times of all trains that reach a railway station.
	           Find the minimum number olatforms required for the railway station so that
	           no train is kept waiting.
                   Consider that all the trains arrive on the same day and leave on the same day.
	           Arrival and departure time can never be the same for a train but we can have  
	           arrival time of one train equal to departure time of the other. At any given 
	           instance of time, same platform can not be used for both departure of a train 
	           and arrival of another train. In such cases, we need different platforms.</p>
            </Paper>
          </Grid>




          <Grid item xs={6}>
	    <Paper className={classes.paper_middle}>
        
	  	<Grid container 
	  	      direction="row" 
	              justifyContent="space-between"
	  	      className="paper_middle" >
	  	   
	  	   <Grid item xs={6}>
		      <FormControl className={classes.formControl}>
                          <Select
                            value={lang}
                            onChange={handleLangChange}
                            displayEmpty
                            className={classes.selectEmpty}
                            inputProps={{ 'aria-label': 'Without label', 
					  'id': 'filled-age-native-simple',
                                        }}
                          >
                            <MenuItem value={"cpp"}><b>C++</b></MenuItem>
                            <MenuItem value={"java"}><b>Java</b></MenuItem>
                            <MenuItem value={"python3"}><b>Python</b></MenuItem>
                          </Select>
                        </FormControl>
 		   </Grid>

	  	   <Grid item xs={6}>
                        <Button
                          variant="contained"
                          color="primary"
                          className={classes.button}
	  		  onClick = {submit_code}
                          endIcon={  <SendIcon >
				        send
				     </SendIcon>
			 	  }
                        >
                        RUN
	  		</Button>
	    	   </Grid>
	  	</Grid>

	    </Paper>

	  


	    <Paper className={classes.text}>
                <SimpleEditor 
	  		      lang={lang}
	  		      parent_function={ code_value  => setValue(code_value)} />
	    </Paper>

          </Grid>




          <Grid item xs={3}>
	 	
	  	<Grid container direction="column" >
	  	   <Grid item xs={12}>
			<Paper className={classes.paper}style={{display:'inline-flex',
								padding: '0px'}} >
	  		
	  			
	  			<Button color="primary" style={{textTransform:'None'}}> 
	  				<b className={classes.controls}> Input </b>
	  			</Button>
	  			<Divider orientation="vertical" style={{ height:'70px',
								 marginLeft:'5px', 
								 width:'2px' }}  />
	  	
	  			<Button color="primary" style={{textTransform:'None'}}>
                                        <b className={classes.controls}> Output </b>
                                </Button>
	  	
	  		</Paper>
	  	   </Grid>

	  	   <Grid item xs={12}>
	  		<Paper className={classes.paper} >
	  		<b>{output}</b>		
	  Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting. Consider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train but we can have arrival time of one train equal to departure time of the other. At any given instance of time, same platform can not be used for both departure of a train and arrival of another train. In such case
	  		</Paper>
	  	   </Grid>

	  	</Grid>

	  </Grid>

      </Grid>
   )

}

export default App;
